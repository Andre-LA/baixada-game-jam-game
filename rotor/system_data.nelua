require 'vector'
require 'rotor.bitset_array'
require 'rotor.entity'
require 'rotor.storage'

local function union(a: *vector(BitsetArray), b: *vector(BitsetArray)): vector(BitsetArray)
   local result: vector(BitsetArray);
   result:reserve(#a + #b)

   for i = 0, < #a do result:push(a[i]) end
   for i = 0, < #b do result:push(b[i]) end

   return result
end

global SystemData = @record{
   mask: BitsetArray,
   mask_write: BitsetArray,
   required_storages: vector(BitsetArray),
   components_indexes: vector(vector(GenerationalIndex)),
   available_indexes: vector(isize)
}

function SystemData.new(read_components: *vector(BitsetArray), write_components: *vector(BitsetArray)): SystemData
   local mask_read = bitset_array.new(1, BITSETARRAY_OF_ZEROS);
   local mask_write = bitset_array.new(1, BITSETARRAY_OF_ZEROS);

   for i = 0_u, < #read_components do
      mask_read = bitset_array.bor(mask_read, read_components[i])
   end
   for i = 0_u, < #write_components do
      mask_write = bitset_array.bor(mask_write, write_components[i])
   end

   local new_system_data: SystemData;
   new_system_data.mask = bitset_array.bor(mask_read, mask_write)
   new_system_data.mask_write = mask_write
   new_system_data.required_storages = union(read_components, write_components)

   return new_system_data
end

local function collect_components(system_data: *SystemData, entity_i: *Entity, out_result: *vector(GenerationalIndex))
   out_result:clear()
   out_result:reserve(#system_data.required_storages)

   -- for each required storage, insert the components indexes respectively
   for i = 0_u, < #system_data.required_storages do
      for j = 0_u, < #entity_i.associated_storages do
         if bitset_array.equals(system_data.required_storages[i], entity_i.associated_storages[j]) then
            out_result:push(entity_i.associated_components[j])
            break
         end
      end
   end
end

function SystemData:update(entity: *Entity)
   local masks_intersection = bitset_array.band(self.mask, entity.mask)

   if bitset_array.equals(masks_intersection, self.mask) then
      local idx_to_insert: isize = 0

      if #self.available_indexes > 0 then
         idx_to_insert = self.available_indexes:pop()
      else
         idx_to_insert = #self.components_indexes
         self.components_indexes:push({})
      end

      collect_components(self, entity, self.components_indexes[idx_to_insert])
   end
end

function SystemData:mark_available(idx: isize)
   self.available_indexes:push(idx)
   local idx_components_indexes: *vector(GenerationalIndex) = self.components_indexes[idx]
   idx_components_indexes:clear()
end
