require 'vector'
require 'raylib'
require 'rotor'
require 'rotor-quick.components'
require 'rotor-quick.makers'

-- [ rotor-quick systems [

global SpritePainterRunner = @record{
   draw_order: vector(uinteger),
   sorted: boolean,
}

function SpritePainterRunner:before_all(system_data: SystemData*)
   local sys_len = #system_data.components_indexes

   self.draw_order:clear()

   local y_vec: vector(float32) = {}
   y_vec:reserve(sys_len)
   defer
      y_vec:destroy()
   end

   for i = 0, < sys_len do
      local ids = system_data.components_indexes[i]

      if #ids > 0 then
         local sprite_id = ids[0]
         local position_id = ids[1]

         local opt_sprite = storages.sprite:get_entry(sprite_id)
         local opt_position = storages.position:get_entry(position_id)

         if opt_sprite.filled and opt_position.filled then
            local position = opt_position:get()
            local inserted = false

            for j = 0, < #self.draw_order do
               if position.position.y < y_vec[j] then
                  y_vec:insert(j, position.position.y)
                  self.draw_order:insert(j, i)
                  inserted = true
                  break
               end
            end

            if not inserted then
               y_vec:push(position.position.y)
               self.draw_order:push(i)
            end
         else
            system_data:mark_available(i)
         end
      end
   end
end

function SpritePainterRunner:after_all(system_data: SystemData*)
   for i = 0, < #system_data.components_indexes do
      local ids = system_data.components_indexes[ self.draw_order[i] ]

      if #ids > 0 then
         local sprite_id = ids[0]
         local position_id = ids[1]

         local opt_sprite = storages.sprite:get_entry(sprite_id)
         local opt_position = storages.position:get_entry(position_id)

         if opt_sprite.filled and opt_position.filled then
            local sprite = opt_sprite:get()
            if sprite.visible then
               local position = opt_position:get()

               local img_unit_w: integer = sprite.sprite_sheet.width // sprite.frame_rect.width
               local img_unit_h: integer = sprite.sprite_sheet.height // sprite.frame_rect.height

               sprite.frame_rect.x = (sprite.frame_index % img_unit_w) * sprite.frame_rect.width
               sprite.frame_rect.y = (sprite.frame_index // img_unit_w) * sprite.frame_rect.height

               Raylib.DrawTextureRec(sprite.sprite_sheet, sprite.frame_rect, position.position + sprite.offset, WHITE)
            end
         else
            system_data:mark_available(i)
         end
      end
   end
end

global SpritePainterSystem = @MakeSystem(SpritePainterRunner, true, false, true, 2, record{
   sprite: Sprite,
   position: Position
})

global CollidersSyncRunner = @record{}

function CollidersSyncRunner:run(
   position: Position*,
   velocity: Velocity*,
   collider: Collider*,
   system_data: SystemData*
)
   collider:sync_with_position(position.position)
end

global CollidersSyncSystem = @MakeSystem(CollidersSyncRunner, false, true, false, 2, record{
   position: Position,
   velocity: Velocity,
   collider: Collider
})

global AnimationRunner = @record{}

function AnimationRunner:run(animations: Animations*, sprite: Sprite*, system_data: SystemData*)
   if not animations.paused then
      animations.elapsed_time = animations.elapsed_time + Globals.dt
      local current_animation: AnimationData* = animations.animations[animations.current_animation_index]

      if animations.elapsed_time > current_animation.frame_duration then
         animations.current_frame_index = (animations.current_frame_index + 1) % #current_animation.frame_indexes
         animations.elapsed_time = 0
      end

      sprite.frame_index = current_animation.frame_indexes[animations.current_frame_index]
   end
end

global AnimationSystem = @MakeSystem(AnimationRunner, false, true, false, 0, record{
   animations: Animations,
   sprite: Sprite
})

global ShowCollisionsRunner = @record{}

function ShowCollisionsRunner:run(position: Position*, collisions: Collisions*, system_data: SystemData*)
   for j = 0, < #collisions.intersections do
      local intersection: Intersection* = collisions.intersections[j]
      local rect_color: Color = intersection.state == CollisionState.Enter and BLUE or RED
      Raylib.DrawLineV(position.position, (@Vector2){ intersection.rect.x, intersection.rect.y}, rect_color)
      Raylib.DrawRectangleLinesEx(intersection.rect, 1, rect_color)
   end
end

global ShowCollisionsSystem = @MakeSystem(ShowCollisionsRunner, false, true, false, 2, record{
   position: Position,
   collisions: Collisions,
})

global ShowCollidersRunner = @record{}

function ShowCollidersRunner:run(collider: Collider*, system_data: SystemData*)
   Raylib.DrawRectangleLinesEx(collider.global_rect, 1, GREEN)
end

global ShowCollidersSystem = @MakeSystem(ShowCollidersRunner, false, true, false, 1, record{
   collider: Collider
})

global ShowPositionsRunner = @record{}

function ShowPositionsRunner:run(position: Position*, system_data: SystemData*)
   local H_start: Vector2 = { -5, 0 }
   local H_end  : Vector2 = {  5, 0 }
   local V_start: Vector2 = { 0, -5 }
   local V_end  : Vector2 = { 0,  5 }

   Raylib.DrawLineV(position.position + H_start, position.position + H_end, RED)
   Raylib.DrawLineV(position.position + V_start, position.position + V_end, RED)
end

global ShowPositionsSystem = @MakeSystem(ShowPositionsRunner, false, true, false, 1, record{
   position: Position,
})

global ShowObstaclesRunner = @record{}

function ShowObstaclesRunner:run(
   position: Position*,
   obstacles: Obstacles*,
   collisions: Collisions*,
   system_data: SystemData*
)
   for j = 0, < #collisions.intersections do
      local intersection: Intersection* = collisions.intersections[j]

       --if intersected with a obstacle entity
      if intersection:contains_tag(obstacles.mask) then
         local intersection_center = intersection:get_center()
         Raylib.DrawLineV(position.position, intersection_center, GOLD)
         Raylib.DrawCircleLines(intersection_center.x // 1, intersection_center.y // 1, 5, GOLD)
      end
   end
end

global ShowObstaclesSystem = @MakeSystem(ShowObstaclesRunner, false, true, false, 3, record{
   position: Position,
   obstacles: Obstacles,
   collisions: Collisions,
})

global CollisionDetectionRunner = @record{}

local function is_past_collision(intersections: vector(Intersection)*, entity_id: GenerationalIndex): integer
   for i = 0, < #intersections do
      if intersections[i].collider.entity_id == entity_id then
         return i
      end
   end
   return -1
end

-- TODO: Optimize this
function CollisionDetectionRunner:run(collider: Collider*, collisions: Collisions*, system_data: SystemData*)
   for i = 0, < #storages.collider.generations do
      if storages.collider.generations[i].filled then
         local collider_i: Collider* = storages.collider.entries[i]

         if collider.entity_id ~= collider_i.entity_id then
            local has_collision = Raylib.CheckCollisionRecs(collider.global_rect, collider_i.global_rect)
            local possible_past_collision = is_past_collision(collisions.intersections, collider_i.entity_id)

            if has_collision then
               local intersection_rect = Raylib.GetCollisionRec(collider.global_rect, collider_i.global_rect)

               if possible_past_collision >= 0 then
                  local intersection: Intersection* = collisions.intersections[possible_past_collision]
                  intersection.state = CollisionState.Stay
                  intersection.rect = intersection_rect
               else
                  collisions.intersections:push({
                     collider = $collider_i,
                     rect = intersection_rect,
                     state = CollisionState.Enter
                  })
               end
            elseif possible_past_collision >= 0 then
               collisions.intersections:remove(possible_past_collision)
            end
         end
      end
   end
end

global CollisionDetectionSystem = @MakeSystem(CollisionDetectionRunner, false, true, false, 1, record{
   collider: Collider,
   collisions: Collisions,
})

global ObstaclesRunner = @record{}

function ObstaclesRunner:run(
   obstacles: Obstacles*,
   collisions: Collisions*,
   velocity: Velocity*,
   system_data: SystemData*
)
   for j = 0, < #collisions.intersections do
      local intersection: Intersection* = collisions.intersections[j]

      -- if intersected with a obstacle entity
      if intersection:contains_tag(obstacles.mask) then
         local dir: Vector2 = intersection:get_direction(intersection:get_center(), 2)
         local dir_x_inputdir = dir * velocity.direction

         if dir_x_inputdir.x < 0 and intersection.rect.width / intersection.rect.height < 1 then
            velocity.direction.x = 0
         end
         if dir_x_inputdir.y < 0 and intersection.rect.height / intersection.rect.width < 1 then
            velocity.direction.y = 0
         end
      end
   end
end

global ObstaclesSystem = @MakeSystem(ObstaclesRunner, false, true, false, 2, record{
   obstacles: Obstacles,
   collisions: Collisions,
   velocity: Velocity,
})

global VelocityRunner = @record{}

function VelocityRunner:run(velocity: Velocity*, position: Position*, system_data: SystemData*)
   position.position.x = position.position.x + velocity.direction.x * velocity.speed
   position.position.y = position.position.y + velocity.direction.y * velocity.speed
end

global VelocitySystem = @MakeSystem(VelocityRunner, false, true, false, 1, record{
   velocity: Velocity,
   position: Position,
})

-- ] rotor-quick systems ]
