## local metalib = require 'rotor-quick.metalib'
## if PROF then
require 'nprof'
global nprof: NProf = {}
## end

-- [ mark record as component [
##[[
   function is_component(rec)
      rec.value.is_component = true
   end
]]
-- ] mark record as component ]

-- [ Entity maker [
## make_entity = hygienize(function(components_context)
   ##[[
      local function sa_err_msg(e_n, t_n, expected_type, got_type)
         local nth_tbl = {'st', 'nd', '3rd'}
         local e_nth = e_n .. (nth_tbl[e_n] or 'th')
         local t_nth = t_n .. (nth_tbl[t_n] or 'th')
         return string.format(
            '%s element of the %s element of the "components_context" argument is not a %s; got: %s',
            e_nth, t_nth, expected_type, got_type
         )
      end

      local function assert_comp_ctx(n, i)
         local t = {'string', 'type'}
         local is_trait = traits[ 'is_'..t[n] ]

         local comp_ctx_n = components_context[i][n]

         if t[n] == 'type' then
            comp_ctx_n = comp_ctx_n.value
         end

         staticassert( is_trait(comp_ctx_n), sa_err_msg(n, i, t[n], '?') )
         return comp_ctx_n
      end

      local function unpack_components_context(i)
         local name = assert_comp_ctx(1, i)

         local _type = assert_comp_ctx(2, i)
         staticassert(_type.is_component, '%s is not a component!', _type)

         return name, _type
      end
   ]]

   local new_entity = @record{ entity_id: GenerationalIndex }
   local VlCollection = @record{}

   ## for i = 1, #components_context do
      ##[[
         local name, _type = unpack_components_context(i)
         local name_id = name..'_id'
         local name_vl = name..'_vl'
         local get_name =  'get_'..name
      ]]

      ## new_entity.value:add_field(name_id, GenerationalIndex.value)
      ## VlCollection.value:add_field(name_vl, _type)

      function new_entity:#|get_name|#(storage: pointer(Storage(#[_type]#))): pointer(#[_type]#)
         local possible_result = storage:get_entry(self.#|name_id|#)
         check(possible_result.filled, #[name .. ' is not associated with entity!']#)
         local result = possible_result:get()
         return result
      end
   ## end

   function new_entity.new(entity_storage: *Storage(Entity), values: VlCollection): (new_entity, *Entity)
      local result: new_entity = {}

      local entity_id, entity = entity_storage:new_entry(Entity.new())
      result.entity_id = entity_id

      ## for i = 1, #components_context do
         ##[[
            local name, _type = unpack_components_context(i)
            local name_id = name..'_id'
            local name_vl = name..'_vl'
         ]]

         local #|name_id|#, #|name_vl|# = storages.#|name|#:new_entry(values.#|name_vl|#)
         entity:associate(#|name_id|#, component_masks.#|name|#)

         result.#|name_id|# = #|name_id|#
      ## end

      return result, entity
   end

   ## return new_entity
## end)

-- ] Entity maker ]

-- [ system maker [
global System = @record{
   read: vector(BitsetArray),
   write: vector(BitsetArray),
   system_data: SystemData,
}

## local make_system = generalize(function(T, use_before, use_run, use_after, read_count, run_T)
   ##[[
      staticassert(traits.is_type(T), "invalid type %s", T)

      local component_names = {}
      local component_types = {}

      for _, field in ipairs(run_T.fields) do
         local ftype = field.type
         staticassert(traits.is_type(ftype) and ftype.is_component, 'type %s is not a component!', ftype)

         table.insert(component_names, field.name)
         table.insert(component_types, ftype)
      end

      local read_names = table.move(component_names, 1, read_count, 1, {})
      local read_types = table.move(component_types, 1, read_count, 1, {})

      local write_names = table.move(component_names, read_count+1, #component_names, 1, {})
      local write_types = table.move(component_types, read_count+1, #component_names, 1, {})
   ]]

   local T = @#[T]#

   local optCollectionT = @record{}
   local storagesCollectionT = @record{}

   ## for i, name in ipairs(component_names) do
      local opt_T = @optional(*#[ component_types[i] ]#)
      ## optCollectionT.value:add_field(name, opt_T.value)

      local stor_T = @pointer(Storage( #[ component_types[i] ]# ))
      ## storagesCollectionT.value:add_field(name, stor_T.value)
   ## end

   local systemT <nickname #[string.format('system(%s)', T)]#> = @record{
      system: System,
      opts: optCollectionT,
      runner: T,
   }

   ## systemT.value.subtype = T

   function systemT.new(): systemT
      local new_system: systemT = {}

      new_system.system.read:reserve(#[#read_names]#)
      new_system.system.write:reserve(#[#read_names]#)

      ## for _, name in ipairs(read_names) do
         new_system.system.read:push(bitset_array.copy(component_masks.#|name|#))
      ## end

      ## for _, name in ipairs(write_names) do
         new_system.system.write:push(bitset_array.copy(component_masks.#|name|#))
      ## end

      new_system.system.system_data = SystemData.new(new_system.system.read, new_system.system.write)
      return new_system
   end

   function systemT:verify(): boolean
      local values: array(boolean, #[ #component_names]#) = {}
      local result: boolean = true

      ## for i, name in ipairs(component_names) do
         values[#[i-1]#] = self.opts.#|name|#.filled
      ## end

      for i = 0, < #[#component_names]# do
         result = result and values[i]
      end

      return result
   end

   function systemT:run(storages: storagesCollectionT)
      ## if PROF then
         nprof:push(#[systemT.value.nickname]#)
         defer nprof:pop() end
      ## end

      local runner: *T = self.runner

      ## if use_before then
         runner:before_all(self.system.system_data)
      ## end

      ## if use_run then
         local system_data: *SystemData = self.system.system_data

         for i = 0, < #system_data.components_indexes do
            local ids = system_data.components_indexes[i]

            if #ids > 0 then
               ## for i, name in ipairs(component_names) do
                  ## local name_id = name..'_id'
                  local #|name_id|# = ids[#[i-1]#]
                  self.opts.#|name|# = storages.#|name|#:get_entry(#|name_id|#)
               ## end

               if self:verify() then
                   ## for _, name in ipairs(component_names) do
                      local #|name|# = self.opts.#|name|#:get()
                   ## end

                  ##[[
                     local ids = metalib.create_id_nodes(aster, component_names)

                     table.insert(ids, aster.Id{'system_data'})
                     table.insert(ids, 1, aster.Id{'runner'})

                     inject_astnode(metalib.create_call_node(aster, T, 'run', table.unpack(ids)))
                  ]]
               else
                  self.system.system_data:mark_available(i)
               end
            end
         end
      ## end

      ## if use_after then
         runner:after_all(self.system.system_data)
      ## end
   end

   function systemT:update(entity: *Entity)
      self.system.system_data:update(entity)
   end

   ## return systemT
## end)

global MakeSystem = #[make_system]#

-- ] system maker ]
