require 'math'
require 'vector'
require 'raylib'
require 'rotor'
require 'game.components'
require 'rotor-quick.components'
require 'rotor-quick.makers'

-- [ game systems [
global PlayerControllerRunner = @record{}

function PlayerControllerRunner:run(
   player: *Player,
   velocity: *Velocity,
   animations: *Animations,
   system_data: *SystemData
)
   velocity.direction = Globals.player_input.direction

   if #Globals.player_input.direction < 0.1 and not Globals.player_input.action then
      animations:change_animation(PlayerAnimations.Idle)
   else
      local current_animation = animations.current_animation_index
      local animation_to_use = current_animation

      local input_mov_is_horizontal = math.abs(Globals.player_input.direction.x) > math.abs(Globals.player_input.direction.y)
      local input_mov_is_vertical = not input_mov_is_horizontal

      if Globals.player_input.action then
         local current_animation_is_vertical_push = (
            current_animation == PlayerAnimations.PushUp or
            current_animation == PlayerAnimations.PushDown
         )

         local current_animation_is_horizontal_push = (
            current_animation == PlayerAnimations.PushLeft or
            current_animation == PlayerAnimations.PushRight
         )

         if input_mov_is_horizontal and not current_animation_is_vertical_push then -- L/R push
            if Globals.player_input.direction.x < 0 and current_animation ~= PlayerAnimations.PushRight then
               animation_to_use = PlayerAnimations.PushLeft
            elseif current_animation ~= PlayerAnimations.PushLeft then
               animation_to_use = PlayerAnimations.PushRight
            end
         elseif input_mov_is_vertical and not current_animation_is_horizontal_push then -- U/D push
            if Globals.player_input.direction.y < 0 and  current_animation ~= PlayerAnimations.PushDown then
               animation_to_use = PlayerAnimations.PushUp
            elseif current_animation ~= PlayerAnimations.PushUp then
               animation_to_use = PlayerAnimations.PushDown
            end
         end
      else -- is movement
         if input_mov_is_horizontal then -- L/R walk
            if Globals.player_input.direction.x < 0 then
               animation_to_use = PlayerAnimations.WalkLeft
            else
               animation_to_use = PlayerAnimations.WalkRight
            end--
         else -- U/D walk
            if Globals.player_input.direction.y < 0 then
               animation_to_use = PlayerAnimations.WalkUp
            else
               animation_to_use = PlayerAnimations.WalkDown
            end
         end
      end

      animations:change_animation(animation_to_use)
   end
end

global PlayerControllerSystem = @MakeSystem(PlayerControllerRunner, false, true, false, 1, record{
   player: Player,
   velocity: Velocity,
   animations: Animations,
})

global BoxControllerRunner = @record{}

function BoxControllerRunner:run(
   box: *Box,
   position: *Position,
   collisions: *Collisions,
   velocity: *Velocity,
   system_data: *SystemData
)
   if Raylib.IsKeyDown(KeyboardKey.KEY_R) then
      position.position = box.start_position
      velocity.direction = { 0, 0 }
   end

   if Globals.player_input.action and #collisions.intersections > 0 then
      for j = 0, < #collisions.intersections do
         local intersection: *Intersection = collisions.intersections[j]

         if intersection:contains_tag(EntityTag.Player) then
            velocity.direction = Globals.player_input.direction
            break
         else
            velocity.direction = { 0, 0 }
         end
      end
   else
      velocity.direction = { 0, 0 }
   end
end

global BoxControllerSystem = @MakeSystem(BoxControllerRunner, false, true, false, 3, record{
   box: Box,
   position: Position,
   collisions: Collisions,
   velocity: Velocity,
})

global GearControllerRunner = @record{}

function GearControllerRunner:run(
   gear: *Gear,
   collisions: *Collisions,
   velocity: *Velocity,
   position: *Position,
   animations: *Animations,
   system_data: *SystemData
)
   if Raylib.IsKeyDown(KeyboardKey.KEY_R) and not gear.engaged then
      position.position = gear.start_position
      velocity.direction = { 0, 0 }
   end

   if not gear.engaged then
      for j = 0, < #collisions.intersections do
         local intersection: *Intersection = collisions.intersections[j]

         if intersection:contains_tag(EntityTag.Player) and Globals.player_input.action and #Globals.player_input.direction > 0.01 then
            local dir: Vector2 = { 0, 0 }

            local is_horizontal = intersection.rect.width / intersection.rect.height < 1
            local is_vertical = intersection.rect.height / intersection.rect.width < 1

            if is_horizontal then
               dir.x = Globals.player_input.direction.x > 0 and 1 or -1
               dir.y = 0
            elseif is_vertical then
               dir.x = 0
               dir.y = Globals.player_input.direction.y > 0 and 1 or -1
            end

            velocity.direction = dir
         elseif intersection:contains_tag(EntityTag.GearSlot) then
            gear.engaged = true
            break
         end
      end
   else
      for j = 0, < #collisions.intersections do
         local intersection: *Intersection = collisions.intersections[j]

         if intersection:contains_tag(EntityTag.GearSlot) then
            position.position.x = intersection.collider.global_rect.x
            position.position.y = intersection.collider.global_rect.y+33
            break
         end
      end
   end

   if not gear.engaged then
      local in_movement = #velocity.direction > 0.15
      animations.paused = not in_movement

      if in_movement then
         local new_anim_idx = math.abs(velocity.direction.x) > math.abs(velocity.direction.y) and 0 or 1
         animations:change_animation(new_anim_idx)
      end
   else
      animations:change_animation(2)
   end
end

global GearControllerSystem = @MakeSystem(GearControllerRunner, false, true, false, 2, record{
   gear: Gear,
   collisions: Collisions,
   velocity: Velocity,
   position: Position,
   animations: Animations,
})

global EngageRunner = @record{}

function EngageRunner:run(collisions: *Collisions, gear_slot: *GearSlot, system_data: SystemData*)
   for i = 0, < #collisions.intersections do
      local intersection: *Intersection = collisions.intersections[i]

      if intersection:contains_tag(EntityTag.Gear) then
         Globals.engaged_slots[gear_slot.slot_idx] = true
         break
      end
   end
end

global EngageSystem = @MakeSystem(EngageRunner, false, true, false, 1, record{
   collisions: Collisions,
   gear_slot: GearSlot,
})

global BridgeRunner = @record{}

function BridgeRunner:run(bridge: *Bridge, collider: *Collider, sprite: *Sprite, system_data: SystemData*)
   if Globals.engaged_slots[bridge.slot_idx] then
      collider.entity_tag = EntityTag.OpenBridge
      sprite.visible = true
   end
end

global BridgeSystem = @MakeSystem(BridgeRunner, false, true, false, 1, record{
   bridge: Bridge,
   collider: Collider,
   sprite: Sprite,
})
-- ] game systems ]
