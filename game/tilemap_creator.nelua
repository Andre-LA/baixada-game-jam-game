require 'vector'
require 'game.entities'

global TileKind = @enum{
   None = -1,

   -- values = frame_index of sprite
   WallTL =  0, WallTC =  1, WallTR =  2, -- TL, TC, TR: top-left; top-center; top-right
--[[WallML =  5, WallMC =  6, WallMR =  7, -- ML, MC, MR: middle-left; middle-center; middle-right]]
   WallBL = 20, WallBC = 21, WallBR = 22, -- BL, BC, BR: bottom-left; bottom-center; bottom-right

   WallTop1 = 30, WallTop2 = 31, WallTop3 = 32, WallTop4 = 33,
   WallTop5 = 40, WallTop6 = 41, WallTop7 = 42, WallTop8 = 43, WallTop9 = 44,

   Floor1 = 3, Floor2 = 14, Floor3 = 13,

   Gear = 9,
   Box = 6,

   -- values = 100 + puzzle number
   Bridge1 = 100,
   Bridge2 = 101,
   Bridge3 = 102,

   -- values = 200 + puzzle number
   GearSlot1 = 200,
   GearSlot2 = 201,
   GearSlot3 = 202,
}

global Tile = @record{
   collider_rect: Rectangle,
   offset_mul: integer,
   offset_y: float32,
   kind: TileKind
}

local function is_bridge(kind: TileKind): boolean
   return kind >= TileKind.Bridge1 and kind < 200
end

local function is_gear_slot(kind: TileKind): boolean
   return kind >= TileKind.GearSlot1 and kind < 300
end

local function is_wall(kind: TileKind): boolean
   return kind == TileKind.WallTL or kind == TileKind.WallTC or kind == TileKind.WallTR or
          --kind == TileKind.WallML or kind == TileKind.WallMC or kind == TileKind.WallMR or
          kind == TileKind.WallBL or kind == TileKind.WallBC or kind == TileKind.WallBR or
          kind == TileKind.WallTop1 or kind == TileKind.WallTop2 or kind == TileKind.WallTop3 or
          kind == TileKind.WallTop4 or kind == TileKind.WallTop5 or kind == TileKind.WallTop6 or
          kind == TileKind.WallTop7 or kind == TileKind.WallTop8 or kind == TileKind.WallTop9
end

local function is_floor(kind: TileKind): boolean
   return kind == TileKind.Floor1 or kind == TileKind.Floor2 or kind == TileKind.Floor3
end

local function create_bridge(
   origin: Vector2,
   i: integer,
   j: integer,
   tile: Tile
)
   local position: Vector2 = { origin.x + 32 * j, (origin.y + 32 * i) - 64}
   BridgeEntity.create(position, tile.kind - 100)
end

local function create_wall(
   origin: Vector2,
   i: integer,
   j: integer,
   tile: Tile
)
   local offset_pos: Vector2 = {0, tile.offset_y}
   local position: Vector2 = { origin.x + 32 * j, (origin.y + 32 * i) - 32 }

   WallEntity.create(position + offset_pos, tile.kind, tile.collider_rect, tile.offset_mul)
end

local function create_floor(
   origin: Vector2,
   i: integer,
   j: integer,
   tile: Tile
)
   local position: Vector2 = { origin.x + 32 * j, (origin.y + 32 * i) - 32 }
   FloorEntity.create(position, tile.kind)
end

local function create_gear_slot(
   origin: Vector2,
   i: integer,
   j: integer,
   tile: Tile
)
   local position: Vector2 = { origin.x + 32 * j, (origin.y + 32 * i) - 31}
   GearSlotEntity.create(position, tile.kind - 200)

   tile.kind = TileKind.WallBC
   create_wall(origin, i, j, tile) -- a wall bottom center
end

local function create_gear(
   origin: Vector2,
   i: integer,
   j: integer,
   tile: Tile
)
   local position: Vector2 = { origin.x + 32 * j, (origin.y + 32 * i) - 32 }
   GearEntity.create(position)

   tile.kind = TileKind.Floor2
   create_wall(origin, i, j, tile) -- a floor
end

local function create_box(
   origin: Vector2,
   i: integer,
   j: integer,
   tile: Tile
)
   local position: Vector2 = { origin.x + 32 * j, (origin.y + 32 * i) - 32 }
   BoxEntity.create(position, TileKind.Box)

   tile.kind = TileKind.Floor2
   create_wall(origin, i, j, tile) -- a floor
end

global function create_tiles(origin: Vector2, tilemap: vector(vector(Tile))*)
   for i = 0, < #tilemap do
      local tile_line = tilemap[i]

      for j = 0, < #tile_line do
         local tile: Tile* = tile_line[j]
         if is_bridge(tile.kind) then
            create_bridge(origin, i, j, tile)
         elseif tile.kind == TileKind.Gear then
            create_gear(origin, i, j, tile)
         elseif tile.kind == TileKind.Box then
            create_box(origin, i, j, tile)
         elseif is_gear_slot(tile.kind) then
            create_gear_slot(origin, i, j, tile)
         elseif is_wall(tile.kind) then
            create_wall(origin, i, j, tile)
         elseif is_floor(tile.kind) then
            create_floor(origin, i, j, tile)
         end
      end
   end
end
