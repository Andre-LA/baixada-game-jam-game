require 'vector'
require 'raylib'
require 'rotor'
require 'game.components'

global PlayerEntity = @record{
   entity_id: GenerationalIndex,
   player_id: GenerationalIndex,
   position_id: GenerationalIndex,
   velocity_id: GenerationalIndex,
   obstacles_id: GenerationalIndex,
   collider_id: GenerationalIndex,
   collisions_id: GenerationalIndex,
   sprite_id: GenerationalIndex,
   animations_id: GenerationalIndex,
}

function PlayerEntity.new(
   entity_storage: Storage(Entity)*,
   player_vl: Player,
   position_vl: Position,
   velocity_vl: Velocity,
   obstacles_vl: Obstacles,
   collider_vl: Collider,
   sprite_vl: Sprite,
   animations_vl: Animations,
   untracked_ids: vector(GenerationalIndex)*
): PlayerEntity
   local entity_id, entity = entity_storage:new_entry(Entity.new())

   local player_id, player = Player.associate(player_vl, entity)
   local position_id, position = Position.associate(position_vl, entity)
   local velocity_id, velocity = Velocity.associate(velocity_vl, entity)
   local obstacles_id, obstacles = Obstacles.associate(obstacles_vl, entity)

   collider_vl.entity_id = entity_id
   local collider_id, collider = Collider.associate(collider_vl, entity)
   local collisions_id, collisions = Collisions.associate({{}}, entity)
   local sprite_id, sprite = Sprite.associate(sprite_vl, entity)
   local animations_id, animations = Animations.associate(animations_vl, entity)

   untracked_ids:push(entity_id)

   return (@PlayerEntity){
      entity_id = entity_id,
      player_id = player_id,
      position_id = position_id,
      velocity_id = velocity_id,
      obstacles_id = obstacles_id,
      collider_id = collider_id,
      collisions_id = collisions_id,
      sprite_id = sprite_id,
      animations_id = animations_id,
   }
end

function PlayerEntity.create(pos: Vector2, fi: uinteger, speed: number, untracked_ids: vector(GenerationalIndex)*): PlayerEntity
   local pl_collider: Collider = {
      local_rect = { 0, 16, 16, 16},
      global_rect = { 0, 16, 16, 16},
      entity_id = { -1, 0 },
      entity_tag = EntityTag.Player
   }

   local pl_sprite: Sprite = {
      sprite_sheet = Raylib.LoadTexture("resources/prototype-tileset.png"),
      frame_index = fi,
      frame_rect = { 0, 0, 32, 32 }
   }

   local pl_animations: Animations = {
      animations = {
         {frame_indexes = {0, 1, 2}, frame_duration = 0.5},
         {frame_indexes = {4, 9, 14, 19}, frame_duration = 0.1},
      },
      current_animation_index = 0,
      current_frame_index = 0,
      elapsed_time = 0,
      paused = false
   }

   return PlayerEntity.new(
      storages.entity,
      --[[player]]     {},
      --[[position]]   { position = pos },
      --[[velocity]]   { direction = { 0, 0 }, speed = speed },
      --[[obstacles]]  { mask = EntityTag.Wall},
      --[[collider]]   pl_collider,
      --[[sprite]]     pl_sprite,
      --[[animations]] pl_animations,
      untracked_ids
   )
end

global WallEntity = @record{
   entity_id: GenerationalIndex,
   position_id: GenerationalIndex,
   collider_id: GenerationalIndex,
   sprite_id: GenerationalIndex,
}

function WallEntity.new(
   entity_storage: Storage(Entity)*,
   position_vl: Position,
   collider_vl: Collider,
   sprite_vl: Sprite,
   untracked_ids: vector(GenerationalIndex)*
): WallEntity
   local entity_id, entity = entity_storage:new_entry(Entity.new())
   local position_id, position = Position.associate(position_vl, entity)

   collider_vl.entity_id = entity_id
   collider_vl:sync_with_position(position_vl.position)
   local collider_id, collider = Collider.associate(collider_vl, entity)

   local sprite_id, sprite = Sprite.associate(sprite_vl, entity)

   untracked_ids:push(entity_id)

   return (@WallEntity){
      entity_id = entity_id,
      position_id = position_id,
      collider_id = collider_id,
      sprite_id = sprite_id,
   }
end

function WallEntity.create(pos: Vector2, fi: uinteger, untracked_ids: vector(GenerationalIndex)*): WallEntity
   local wall_collider: Collider = {
      local_rect = { 0, 16, 32, 16},
      global_rect = { 0, 16, 32, 16},
      entity_id = { -1, 0 },
      entity_tag = EntityTag.Wall
   }

   local wall_sprite: Sprite = {
      sprite_sheet = Raylib.LoadTexture("resources/prototype-tileset.png"),
      frame_index = fi,
      frame_rect = { 0, 0, 32, 32 }
   }

   return WallEntity.new(
      storages.entity,
      --[[position]] { position = pos },
      --[[collider]] wall_collider,
      --[[sprite]]   wall_sprite,
      untracked_ids
   )
end
