require 'config'
require 'raylib'
require 'allocators.gc'
## if PLATFORM_WEB then
   gc:pause() -- conservative GCs cannot run automatically with emscripten
## end
require 'vector'
require 'rotor'
require 'rotor-quick.components'
require 'game.resources'

## if PROF then
   require 'nprof'
   local nprof: NProf = {}
## end

local BACKGROUND_COLOR: Color <const> = { 0x22, 0x20, 0x34, 255 }

local Language  = @enum {en_US = 0, pt_BR = 1}
local current_lang: Language = #[DEFAULT_LANG]# == 'en-US' and Language.en_US or Language.pt_BR

local txt_text: stringview[2] <const> = {
   "After so much effort, the princess\ncan finally escape this \nterrible prison!",
   "Após tanto esforço, a princesa\nfinalmente poderá escapar desta \nterrível prisão!"
}

local txt_credits: stringview[2] <const> = {
[[ == Castle Escape ==

Made by:
- André Luiz Alvares: Game programmer
- Leonardo Santos: Pixel artist

Special Thanks!
- Eduardo Bart: Helped us with the web building

Technologies used:
- Nelua Programming language
- Raylib Game framework
- Rotor (ECS library for Nelua)
]],
[[ == Fuga do Castelo ==

Feito por:
- André Luiz Alvares: Programador do jogo
- Leonardo Santos: Artista de pixel

Agradecimentos especiais!
- Eduardo Bart: Nos ajudou com a build da web

Tecnologias usadas:
- Linguagem de programação Nelua
- Arcabouço de jogos Raylib
- Rotor (biblioteca de ECS para Nelua)
]]
}

-- [ Main game records  and enums[
global EntityTag = @enum {
   Player = 1,
   TileMap = 2,
   Wall = 4,
   GearSlot = 8,
   Box = 16,
   Gear = 32,
   ClosedBridge = 64,
   OpenBridge = 128,
}

global PlayerInput = @record{
   direction: Vector2,
   action: boolean
}

global Globals: record{
   dt: float32,
   player_input: PlayerInput,
   engaged_slots: vector(boolean),
   camera: Camera2D,
   finalized_camera: Camera2D,
   game_window: record{
      width: integer,
      height: integer,
      title: stringview
   }
} = {
   dt = 0,
   player_input = {
      direction = { 0, 0 },
      action = false,
   },
   engaged_slots = { false, false, false },
   camera = {
      offset = { #[WIN_WIDTH / 2]#, #[WIN_HEIGHT / 2]#},
      target = { #[PL_POS_X * 32]#, #[PL_POS_Y * 32]# },
      rotation = 0,
      zoom = 2
   },
   finalized_camera = {
      offset = { #[WIN_WIDTH / 2]#, #[WIN_HEIGHT / 2]#},
      target = { 0, 0 },
      rotation = 0,
      zoom = 2
   },
   game_window = {
      #[WIN_WIDTH]# // 1,
      #[WIN_HEIGHT]# // 1,
      #[WIN_TITLE]#
   },
}

require 'game.components'

-- [ storages [
global storages: record{
   entity: Storage(Entity),
   player: Storage(Player),
   gear: Storage(Gear),
   gear_slot: Storage(GearSlot),
   bridge: Storage(Bridge),
   box: Storage(Box),
   position: Storage(Position),
   velocity: Storage(Velocity),
   collider: Storage(Collider),
   collisions: Storage(Collisions),
   sprite: Storage(Sprite),
   animations: Storage(Animations),
   obstacles: Storage(Obstacles),
} = {
   entity = (@Storage(Entity)).new(),
   player = (@Storage(Player)).new(),
   gear = (@Storage(Gear)).new(),
   gear_slot = (@Storage(GearSlot)).new(),
   bridge = (@Storage(Bridge)).new(),
   box = (@Storage(Box)).new(),
   position = (@Storage(Position)).new(),
   velocity = (@Storage(Velocity)).new(),
   collider = (@Storage(Collider)).new(),
   collisions = (@Storage(Collisions)).new(),
   sprite = (@Storage(Sprite)).new(),
   animations = (@Storage(Animations)).new(),
   obstacles = (@Storage(Obstacles)).new(),
}
-- ] storages ]

-- [ component masks [
global component_masks: record{
   entity: BitsetArray,     --    1
   player: BitsetArray,     --    2
   gear: BitsetArray,       --    4
   gear_slot: BitsetArray,  --    8
   bridge: BitsetArray,     --   16
   box: BitsetArray,        --   32
   position: BitsetArray,   --   64
   velocity: BitsetArray,   --  128
   collider: BitsetArray,   --  256
   collisions: BitsetArray, --  512
   sprite: BitsetArray,     -- 1024
   animations: BitsetArray, -- 2048
   obstacles: BitsetArray,  -- 4096
} = {
   entity = bitset_array.lshift(BITSETARRAY_OF_ONE,     0), --    1
   player = bitset_array.lshift(BITSETARRAY_OF_ONE,     1), --    2
   gear = bitset_array.lshift(BITSETARRAY_OF_ONE,       2), --    4
   gear_slot = bitset_array.lshift(BITSETARRAY_OF_ONE,  3), --    8
   bridge = bitset_array.lshift(BITSETARRAY_OF_ONE,     4), --   16
   box = bitset_array.lshift(BITSETARRAY_OF_ONE,        5), --   32
   position = bitset_array.lshift(BITSETARRAY_OF_ONE,   6), --   64
   velocity = bitset_array.lshift(BITSETARRAY_OF_ONE,   7), --  128
   collider = bitset_array.lshift(BITSETARRAY_OF_ONE,   8), --  256
   collisions = bitset_array.lshift(BITSETARRAY_OF_ONE, 9), --  512
   sprite = bitset_array.lshift(BITSETARRAY_OF_ONE,    10), -- 1024
   animations = bitset_array.lshift(BITSETARRAY_OF_ONE,11), -- 2048
   obstacles = bitset_array.lshift(BITSETARRAY_OF_ONE, 12), -- 4096
}
-- ] component masks ]

require 'rotor-quick.systems'
require 'game.systems'

local GameSystems = @record{
   colliders_sync: CollidersSyncSystem,
   collision_detection: CollisionDetectionSystem,

   player_controller: PlayerControllerSystem,
   box_controller: BoxControllerSystem,
   gear_controller: GearControllerSystem,

   engage_system: EngageSystem,
   bridge_system: BridgeSystem,

   obstacles_system: ObstaclesSystem,
   velocity_system: VelocitySystem,

   animation: AnimationSystem,

   sprite_painter: SpritePainterSystem,

   show_colliders: ShowCollidersSystem,
   show_collisions: ShowCollisionsSystem,
   show_obstacles: ShowObstaclesSystem,
   show_positions: ShowPositionsSystem,
}

function GameSystems:update_all(entity: Entity*)
   self.colliders_sync.system.system_data:update(entity)
   self.collision_detection.system.system_data:update(entity)

   self.box_controller.system.system_data:update(entity)
   self.gear_controller.system.system_data:update(entity)
   self.player_controller.system.system_data:update(entity)

   self.engage_system.system.system_data:update(entity)
   self.bridge_system.system.system_data:update(entity)

   self.obstacles_system.system.system_data:update(entity)
   self.velocity_system.system.system_data:update(entity)

   self.animation.system.system_data:update(entity)

   self.sprite_painter.system.system_data:update(entity)

   self.show_colliders.system.system_data:update(entity)
   self.show_collisions.system.system_data:update(entity)
   self.show_obstacles.system.system_data:update(entity)
   self.show_positions.system.system_data:update(entity)
end

global Game_Systems: GameSystems = {
   colliders_sync = CollidersSyncSystem.new(),
   collision_detection = CollisionDetectionSystem.new(),

   player_controller = PlayerControllerSystem.new(),
   box_controller = BoxControllerSystem.new(),
   gear_controller = GearControllerSystem.new(),

   engage_system = EngageSystem.new(),
   bridge_system = BridgeSystem.new(),

   obstacles_system = ObstaclesSystem.new(),
   velocity_system = VelocitySystem.new(),

   animation = AnimationSystem.new(),

   sprite_painter = SpritePainterSystem.new(),

   show_colliders = ShowCollidersSystem.new(),
   show_collisions = ShowCollisionsSystem.new(),
   show_obstacles = ShowObstaclesSystem.new(),
   show_positions = ShowPositionsSystem.new(),
}

-- ] Main game records ]

require 'game.entities'
require 'game.tilemap_creator'
require 'game.levels'

local function update_player_input_values()
   local right_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_D) or Raylib.IsKeyDown(KeyboardKey.KEY_RIGHT) or Raylib.IsKeyDown(KeyboardKey.KEY_L)
   local up_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_W) or Raylib.IsKeyDown(KeyboardKey.KEY_UP) or Raylib.IsKeyDown(KeyboardKey.KEY_I)
   local left_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_A) or Raylib.IsKeyDown(KeyboardKey.KEY_LEFT) or Raylib.IsKeyDown(KeyboardKey.KEY_J)
   local down_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_S) or Raylib.IsKeyDown(KeyboardKey.KEY_DOWN) or Raylib.IsKeyDown(KeyboardKey.KEY_K)

   local action_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_SPACE) or Raylib.IsKeyDown(KeyboardKey.KEY_ENTER)

   Globals.player_input.direction.x = left_is_down and -1 or (right_is_down and 1 or 0)
   Globals.player_input.direction.y = up_is_down and -1 or (down_is_down and 1 or 0)
   Globals.player_input.action = action_is_down
end

-- [ Game initialization [
## if not PLATFORM_WEB then
   Raylib.SetTargetFPS(60)
## end

Raylib.InitWindow(Globals.game_window.width, Globals.game_window.height, Globals.game_window.title)
resources:load()

local player_entity = PlayerEntity.create({ #[PL_POS_X * 32]#, #[PL_POS_Y * 32]# })
create_level({ 32*8, 32*3 })

-- ] Game initialization ]

-- [ Game loop [
local function update_draw_frame()
   ## if PROF then
      nprof:push'frame'
   ## end

   local player_position_opt = storages.position:get_entry(player_entity.position_id)
   local player_position: Position* = player_position_opt:get()

   local pos_to_finalize <comptime> = 2600
   local game_finalized = player_position.position.y < pos_to_finalize

   -- [ Update [
   Globals.dt = Raylib.GetFrameTime()

   ## if PRINT_FPS then
      print('FPS: ' .. tostring(Raylib.GetFPS()))
   ## end

   if not game_finalized then
      update_player_input_values()
   else
      local player_velocity_opt = storages.velocity:get_entry(player_entity.velocity_id)
      local player_velocity: Velocity* = player_velocity_opt:get()
      player_velocity.direction.y = 1
   end

   do --  [ Update [
      ## if PROF then
         nprof:push'update systems'
         defer nprof:pop() end
      ## end

      do -- [ colliders_sync [
         ## if PROF then
            nprof:push'colliders_sync'
            defer nprof:pop() end
         ## end
         Game_Systems.colliders_sync:run({&storages.position, &storages.velocity, &storages.collider})
      end -- ] colliders_sync ]

      do -- [ collision_detection [
         ## if PROF then
            nprof:push'collision_detection'
            defer nprof:pop() end
         ## end
         Game_Systems.collision_detection:run({&storages.collider, &storages.collisions})
      end -- ] collision_detection ]

      do  -- [ player_controller [
         ## if PROF then
            nprof:push'player_controller'
            defer nprof:pop() end
         ## end
         Game_Systems.player_controller:run({&storages.player, &storages.velocity, &storages.animations})
      end -- ] player_controller ]

      do -- [ box_controller [
         ## if PROF then
            nprof:push'box_controller'
            defer nprof:pop() end
         ## end
         Game_Systems.box_controller:run({&storages.box, &storages.position, &storages.collisions, &storages.velocity})
      end -- ] box_controller ]

      do -- [ gear_controller [
         ## if PROF then
            nprof:push'gear_controller'
            defer nprof:pop() end
         ## end
         Game_Systems.gear_controller:run({&storages.gear, &storages.collisions, &storages.velocity, &storages.position, &storages.animations})
      end -- ] gear_controller ]

      do -- [ engage_system [
         ## if PROF then
            nprof:push'engage_system'
            defer nprof:pop() end
         ## end
         Game_Systems.engage_system:run({&storages.collisions, &storages.gear_slot})
      end -- ] engage_system ]

      do -- [ bridge_system [
         ## if PROF then
            nprof:push'bridge_system'
            defer nprof:pop() end
         ## end
         Game_Systems.bridge_system:run({&storages.bridge, &storages.collider, &storages.sprite})
      end -- ] bridge_system ]

      do -- [ obstacles_system [
         ## if PROF then
            nprof:push'obstacles_system'
            defer nprof:pop() end
         ## end
         Game_Systems.obstacles_system:run({&storages.obstacles, &storages.collisions, &storages.velocity})
      end -- ] obstacles_system ]

      do -- [ velocity_system [
         ## if PROF then
            nprof:push'velocity_system'
            defer nprof:pop() end
         ## end
         Game_Systems.velocity_system:run({&storages.velocity, &storages.position})
      end -- ] velocity_system ]

      do  -- [ animation [
         ## if PROF then
            nprof:push'animation'
            defer nprof:pop() end
         ## end
         Game_Systems.animation:run({&storages.animations, &storages.sprite})
      end -- ] animation ]

      Globals.camera.target = player_position.position

      player_position.position.y = math.max(0, player_position.position.y)

      if Raylib.IsKeyPressed(KeyboardKey.KEY_T) then
         switch current_lang
         case Language.en_US then
            current_lang = Language.pt_BR
         case Language.pt_BR then
            current_lang = Language.en_US
         end
      end
   end -- ] Update ]

   do -- [ Draw [
      ## if PROF then
         nprof:push'drawing systems'
      ## end


      Raylib.BeginDrawing()
         Raylib.ClearBackground(BACKGROUND_COLOR)

         Raylib.BeginMode2D(Globals.camera)
            Raylib.DrawText(txt_text[current_lang], 32*25, 32*104, 16, RAYWHITE)

            do -- [ sprite_painter [
               ## if PROF then
                  nprof:push'sprite painter'
                  defer nprof:pop() end
               ## end
               Game_Systems.sprite_painter:run({&storages.sprite, &storages.position})
            end -- ] sprite_painter ]

            ## if SHOW_DEV_INFO then
               Game_Systems.show_colliders:run({&storages.collider})
               Game_Systems.show_collisions:run({&storages.position, &storages.collisions})
               Game_Systems.show_obstacles:run({&storages.position, &storages.obstacles, &storages.collisions})
               Game_Systems.show_positions:run({&storages.position})
            ## end
         Raylib.EndMode2D()

         if game_finalized then
            do
               ## if PROF then
                  nprof:push'end game drawing'
                  defer nprof:pop() end
               ## end

               local interval  <comptime> = 200
               local fade1_len <comptime> = 500
               local fade2_len <comptime> = 250
               local fade3_len <comptime> = 500
               local fade4_len <comptime> = 500

               local rec_color1: Color = BLACK
               local rec_color2: Color = WHITE
               local rec_color3: Color = WHITE
               local rec_color4: Color = DARKBROWN

               do
                  local fade_posvl = player_position.position.y - (pos_to_finalize - fade1_len)
                  local fade_vl = math.floor((1.0 - math.max(0.0, fade_posvl / fade1_len)) * 255)
                  rec_color1.a = fade_vl

                  Raylib.DrawRectangle(0, 0, Globals.game_window.width, Globals.game_window.height, rec_color1)
               end

               local pos_to_fade2 = pos_to_finalize - fade1_len - interval
               if rec_color1.a == 255 and player_position.position.y < pos_to_fade2 then
                  local fade_posvl = player_position.position.y - (pos_to_fade2 - fade2_len)
                  local fade_vl = math.floor((1.0 - math.max(0.0, fade_posvl / fade2_len)) * 255)
                  rec_color2.a = fade_vl

                  Raylib.DrawRectangle(0, 0, Globals.game_window.width, Globals.game_window.height, rec_color2)
               end

               local pos_to_fade3 = pos_to_fade2 - fade2_len
               if rec_color1.a == 255 and player_position.position.y < pos_to_fade3 then
                  local fade_posvl = player_position.position.y - (pos_to_fade3 - fade3_len)
                  local a = 1.0 - math.max(0.0, fade_posvl / fade3_len)
                  local fade_vl = math.floor(a * 255)
                  rec_color3.a = fade_vl

                  Globals.finalized_camera.target = Vector2.Lerp({ 1100, 1000 }, { 800, 600 }, a)
                  Globals.finalized_camera.zoom = Raymath.Lerp(1, 0.5, a)

                  Raylib.BeginMode2D(Globals.finalized_camera)
                     Raylib.DrawTexture(resources.end_scene, 0, 0, rec_color3)
                  Raylib.EndMode2D()
               end

               local pos_to_fade4 = pos_to_fade3 - fade3_len
               if rec_color3.a == 255 and player_position.position.y < pos_to_fade4 then
                  local fade_posvl = player_position.position.y - (pos_to_fade4 - fade4_len)
                  local fade_vl = math.floor((1.0 - math.max(0.0, fade_posvl / fade4_len)) * 255)
                  rec_color4.a = fade_vl

                  Raylib.DrawText(txt_credits[current_lang], 300, 20, 20, rec_color4)
               end
            end
         end

         ## if PROF then
            nprof:pop()
            nprof:pop()
            nprof:draw()
            nprof:reset()
         ## end
      Raylib.EndDrawing()
   end -- ] Draw ]

   ## if PLATFORM_WEB then
      gc:run() -- safe to collect garbage here
   ## end
end

## if PLATFORM_WEB then
   emscripten_set_main_loop(update_draw_frame, 0, 1)
## else
   while not Raylib.WindowShouldClose() do
      update_draw_frame()
   end
##end

-- ] Game loop ]

-- [ Game De-initialization [
resources:unload()
Raylib.CloseWindow()
-- ] Game De-initialization ]
