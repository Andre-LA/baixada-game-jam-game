require 'raylib'
require 'vector'
require 'string'
require 'rotor'
require 'config'

-- [ Main game records  and enums[
global EntityTag = @enum {
   Player = 1,
   TileMap = 2,
   Wall = 4,
   CogSlot = 8,
   PuzzleWall = 16,
   Box = 32,
   Cog = 64,
}

global CollisionState = @enum {
   None = 0,
   Enter,
   Stay
}

global PlayerInput = @record{
   direction: Vector2,
   action: boolean
}

require 'game'

global Globals: record{
   player_input: PlayerInput,
   camera: record{
      position: Vector2,
      camera: Camera2D
   },
   game_window: record{
      width: integer,
      height: integer,
      title: string
   },
   game_systems: record{
      player_controller: PlayerController,
      box_controller: BoxController,
      obstacles_system: ObstaclesSystem,
      velocity_system: VelocitySystem,
      colliders_sync: CollidersSync,
      collision_detection: CollisionDetection,
      animation: Animation,
      sprite_painter: SpritePainter,
      show_collisions: ShowCollisions,
   },
   untracked_ids: vector(GenerationalIndex),
} = {
   player_input = {
      direction = { 0, 0 },
      action = false,
   },
   camera = {
      position = { #[PL_POS_X]#, #[PL_POS_Y]# },
      camera = {
         offset = { #[WIN_WIDTH]# / 2, #[WIN_HEIGHT]# / 2 },
         target = { #[PL_POS_X]#, #[PL_POS_Y]# },
         rotation = 0,
         zoom = 1
      }
   },
   game_window = {
      #[WIN_WIDTH]# // 1,
      #[WIN_HEIGHT]# // 1,
      #[WIN_TITLE]#
   },
   untracked_ids = {},
   game_systems = {
      player_controller = PlayerController.new(),
      box_controller = BoxController.new(),
      obstacles_system = ObstaclesSystem.new(),
      velocity_system = VelocitySystem.new(),
      colliders_sync = CollidersSync.new(),
      collision_detection = CollisionDetection.new(),
      animation = Animation.new(),
      sprite_painter = SpritePainter.new(),
      show_collisions = ShowCollisions.new(),
   },
}

local function update_player_input_values()
   local right_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_D) or Raylib.IsKeyDown(KeyboardKey.KEY_RIGHT) or Raylib.IsKeyDown(KeyboardKey.KEY_L)
   local up_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_W) or Raylib.IsKeyDown(KeyboardKey.KEY_UP) or Raylib.IsKeyDown(KeyboardKey.KEY_I)
   local left_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_A) or Raylib.IsKeyDown(KeyboardKey.KEY_LEFT) or Raylib.IsKeyDown(KeyboardKey.KEY_J)
   local down_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_S) or Raylib.IsKeyDown(KeyboardKey.KEY_DOWN) or Raylib.IsKeyDown(KeyboardKey.KEY_K)

   Globals.player_input.direction.x = left_is_down and -1 or (right_is_down and 1 or 0)
   Globals.player_input.direction.y = up_is_down and -1 or (down_is_down and 1 or 0)
end

-- ] Main game records ]

-- [ Game initialization [
Raylib.InitWindow(Globals.game_window.width, Globals.game_window.height, Globals.game_window.title)
Raylib.SetTargetFPS(60)

local function update_all_systems()
   Globals.game_systems.player_controller.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.box_controller.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.obstacles_system.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.velocity_system.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.colliders_sync.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.collision_detection.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.animation.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.sprite_painter.system.system_data:update(storages.entity, Globals.untracked_ids)
   Globals.game_systems.show_collisions.system.system_data:update(storages.entity, Globals.untracked_ids)
end

local wall_entity = WallEntity.create({20, 20}, 0, Globals.untracked_ids)
local player_entity = PlayerEntity.create({30, 15}, 1, 1, Globals.untracked_ids)

update_all_systems()

local test_position_opt = storages.position:get_entry(player_entity.position_id)
local test_position: Position* = test_position_opt:get()

local test_animations_opt = storages.animations:get_entry(player_entity.animations_id)
local test_animations: Animations* = test_animations_opt:get()
test_animations.current_animation_index = 1

-- ] Game initialization ]

-- [ Game loop [
while not Raylib.WindowShouldClose() do
   -- [ Update [
   local dt = Raylib.GetFrameTime()

   update_player_input_values()

   Globals.game_systems.player_controller:run(storages.player, storages.velocity, Globals.player_input)
   Globals.game_systems.box_controller:run(storages.box, storages.position, storages.collisions, storages.velocity, Globals.player_input, test_position.position)

   Globals.game_systems.obstacles_system:run(storages.obstacles, storages.collisions, storages.velocity)
   Globals.game_systems.velocity_system:run(storages.velocity, storages.position)

   Globals.game_systems.colliders_sync:run(storages.position, storages.velocity, storages.collider)
   Globals.game_systems.collision_detection:run(storages.collider, storages.collisions)

   Globals.game_systems.animation:run(storages.animations, storages.sprite, dt)
   -- ] Update ]

   -- [ Draw [
   Raylib.BeginDrawing()
      Raylib.ClearBackground(RAYWHITE)

      Globals.game_systems.sprite_painter:run(storages.sprite, storages.position)
      Globals.game_systems.show_collisions:run(storages.collisions, storages.collider)
   Raylib.EndDrawing()
   -- ] Draw ]
end
-- ] Game loop ]

-- [ Game De-initialization [
Raylib.CloseWindow()
-- ] Game De-initialization ]
