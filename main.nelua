require 'config'
require 'raylib'
require 'allocators.gc'
## if PLATFORM_WEB then
   gc:pause() -- conservative GCs cannot run automatically with emscripten
## end
require 'vector'
require 'rotor'
require 'rotor-quick.components'
require 'game.resources'

local BACKGROUND_COLOR: Color <const> = { 0x22, 0x20, 0x34, 255 }

local TXT_TEXT_PT_BR: stringview <const> = "Após tanto esforço, a princesa\nfinalmente poderá escapar desta \nterrível prisão!"
local TXT_TEXT_EN_US: stringview <const> = "After so much effort, the princess\ncan finally escape this \nterrible prison!"
local txt_text: stringview = #[DEFAULT_LANG]# == 'en-US' and TXT_TEXT_EN_US or TXT_TEXT_PT_BR

-- [ Main game records  and enums[
global EntityTag = @enum {
   Player = 1,
   TileMap = 2,
   Wall = 4,
   GearSlot = 8,
   Box = 16,
   Gear = 32,
   ClosedBridge = 64,
   OpenBridge = 128,
}

global PlayerInput = @record{
   direction: Vector2,
   action: boolean
}

global Globals: record{
   dt: float32,
   player_input: PlayerInput,
   engaged_slots: vector(boolean),
   camera: Camera2D,
   game_window: record{
      width: integer,
      height: integer,
      title: stringview
   }
} = {
   dt = 0,
   player_input = {
      direction = { 0, 0 },
      action = false,
   },
   engaged_slots = { false, false, false },
   camera = {
      offset = { #[WIN_WIDTH / 2]#, #[WIN_HEIGHT / 2]#},
      target = { #[PL_POS_X * 32]#, #[PL_POS_Y * 32]# },
      rotation = 0,
      zoom = 2
   },
   game_window = {
      #[WIN_WIDTH]# // 1,
      #[WIN_HEIGHT]# // 1,
      #[WIN_TITLE]#
   },
}

require 'game.components'

-- [ storages [
global storages: record{
   entity: Storage(Entity),
   player: Storage(Player),
   gear: Storage(Gear),
   gear_slot: Storage(GearSlot),
   bridge: Storage(Bridge),
   box: Storage(Box),
   position: Storage(Position),
   velocity: Storage(Velocity),
   collider: Storage(Collider),
   collisions: Storage(Collisions),
   sprite: Storage(Sprite),
   animations: Storage(Animations),
   obstacles: Storage(Obstacles),
} = {
   entity = (@Storage(Entity)).new(),
   player = (@Storage(Player)).new(),
   gear = (@Storage(Gear)).new(),
   gear_slot = (@Storage(GearSlot)).new(),
   bridge = (@Storage(Bridge)).new(),
   box = (@Storage(Box)).new(),
   position = (@Storage(Position)).new(),
   velocity = (@Storage(Velocity)).new(),
   collider = (@Storage(Collider)).new(),
   collisions = (@Storage(Collisions)).new(),
   sprite = (@Storage(Sprite)).new(),
   animations = (@Storage(Animations)).new(),
   obstacles = (@Storage(Obstacles)).new(),
}
-- ] storages ]

-- [ component masks [
global component_masks: record{
   entity: BitsetArray,     --    1
   player: BitsetArray,     --    2
   gear: BitsetArray,       --    4
   gear_slot: BitsetArray,  --    8
   bridge: BitsetArray,     --   16
   box: BitsetArray,        --   32
   position: BitsetArray,   --   64
   velocity: BitsetArray,   --  128
   collider: BitsetArray,   --  256
   collisions: BitsetArray, --  512
   sprite: BitsetArray,     -- 1024
   animations: BitsetArray, -- 2048
   obstacles: BitsetArray,  -- 4096
} = {
   entity = bitset_array.lshift(BITSETARRAY_OF_ONE,     0), --    1
   player = bitset_array.lshift(BITSETARRAY_OF_ONE,     1), --    2
   gear = bitset_array.lshift(BITSETARRAY_OF_ONE,       2), --    4
   gear_slot = bitset_array.lshift(BITSETARRAY_OF_ONE,  3), --    8
   bridge = bitset_array.lshift(BITSETARRAY_OF_ONE,     4), --   16
   box = bitset_array.lshift(BITSETARRAY_OF_ONE,        5), --   32
   position = bitset_array.lshift(BITSETARRAY_OF_ONE,   6), --   64
   velocity = bitset_array.lshift(BITSETARRAY_OF_ONE,   7), --  128
   collider = bitset_array.lshift(BITSETARRAY_OF_ONE,   8), --  256
   collisions = bitset_array.lshift(BITSETARRAY_OF_ONE, 9), --  512
   sprite = bitset_array.lshift(BITSETARRAY_OF_ONE,    10), -- 1024
   animations = bitset_array.lshift(BITSETARRAY_OF_ONE,11), -- 2048
   obstacles = bitset_array.lshift(BITSETARRAY_OF_ONE, 12), -- 4096
}
-- ] component masks ]

require 'rotor-quick.systems'
require 'game.systems'

local GameSystems = @record{
   colliders_sync: CollidersSyncSystem,
   collision_detection: CollisionDetectionSystem,

   player_controller: PlayerControllerSystem,
   box_controller: BoxControllerSystem,
   gear_controller: GearControllerSystem,

   engage_system: EngageSystem,
   bridge_system: BridgeSystem,

   obstacles_system: ObstaclesSystem,
   velocity_system: VelocitySystem,

   animation: AnimationSystem,

   sprite_painter: SpritePainterSystem,

   show_colliders: ShowCollidersSystem,
   show_collisions: ShowCollisionsSystem,
   show_obstacles: ShowObstaclesSystem,
   show_positions: ShowPositionsSystem,
}

function GameSystems:update_all(entity: Entity*)
   self.colliders_sync.system.system_data:update(entity)
   self.collision_detection.system.system_data:update(entity)

   self.box_controller.system.system_data:update(entity)
   self.gear_controller.system.system_data:update(entity)
   self.player_controller.system.system_data:update(entity)

   self.engage_system.system.system_data:update(entity)
   self.bridge_system.system.system_data:update(entity)

   self.obstacles_system.system.system_data:update(entity)
   self.velocity_system.system.system_data:update(entity)

   self.animation.system.system_data:update(entity)

   self.sprite_painter.system.system_data:update(entity)

   self.show_colliders.system.system_data:update(entity)
   self.show_collisions.system.system_data:update(entity)
   self.show_obstacles.system.system_data:update(entity)
   self.show_positions.system.system_data:update(entity)
end

global Game_Systems: GameSystems = {
   colliders_sync = CollidersSyncSystem.new(),
   collision_detection = CollisionDetectionSystem.new(),

   player_controller = PlayerControllerSystem.new(),
   box_controller = BoxControllerSystem.new(),
   gear_controller = GearControllerSystem.new(),

   engage_system = EngageSystem.new(),
   bridge_system = BridgeSystem.new(),

   obstacles_system = ObstaclesSystem.new(),
   velocity_system = VelocitySystem.new(),

   animation = AnimationSystem.new(),

   sprite_painter = SpritePainterSystem.new(),

   show_colliders = ShowCollidersSystem.new(),
   show_collisions = ShowCollisionsSystem.new(),
   show_obstacles = ShowObstaclesSystem.new(),
   show_positions = ShowPositionsSystem.new(),
}

-- ] Main game records ]

require 'game.entities'
require 'game.tilemap_creator'
require 'game.levels'

local function update_player_input_values()
   local right_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_D) or Raylib.IsKeyDown(KeyboardKey.KEY_RIGHT) or Raylib.IsKeyDown(KeyboardKey.KEY_L)
   local up_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_W) or Raylib.IsKeyDown(KeyboardKey.KEY_UP) or Raylib.IsKeyDown(KeyboardKey.KEY_I)
   local left_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_A) or Raylib.IsKeyDown(KeyboardKey.KEY_LEFT) or Raylib.IsKeyDown(KeyboardKey.KEY_J)
   local down_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_S) or Raylib.IsKeyDown(KeyboardKey.KEY_DOWN) or Raylib.IsKeyDown(KeyboardKey.KEY_K)

   local action_is_down = Raylib.IsKeyDown(KeyboardKey.KEY_SPACE) or Raylib.IsKeyDown(KeyboardKey.KEY_ENTER)

   Globals.player_input.direction.x = left_is_down and -1 or (right_is_down and 1 or 0)
   Globals.player_input.direction.y = up_is_down and -1 or (down_is_down and 1 or 0)
   Globals.player_input.action = action_is_down
end

-- [ Game initialization [
## if not PLATFORM_WEB then
   Raylib.SetTargetFPS(60)
## end

Raylib.InitWindow(Globals.game_window.width, Globals.game_window.height, Globals.game_window.title)
resources:load()

local player_entity = PlayerEntity.create({ #[PL_POS_X * 32]#, #[PL_POS_Y * 32]# })
create_level({ 32*8, 32*3 })

-- ] Game initialization ]

-- [ Game loop [
local function update_draw_frame()
   local player_position_opt = storages.position:get_entry(player_entity.position_id)
   local player_position: Position* = player_position_opt:get()

   local game_finalized = player_position.position.y < 400

   -- [ Update [
   Globals.dt = Raylib.GetFrameTime()

   ## if PRINT_FPS then
      print('FPS: ' .. tostring(Raylib.GetFPS()))
   ## end

   update_player_input_values()

   Game_Systems.colliders_sync:run({&storages.position, &storages.velocity, &storages.collider})
   Game_Systems.collision_detection:run({&storages.collider, &storages.collisions})

   Game_Systems.player_controller:run({&storages.player, &storages.velocity, &storages.animations})
   Game_Systems.box_controller:run({&storages.box, &storages.position, &storages.collisions, &storages.velocity})
   Game_Systems.gear_controller:run({&storages.gear, &storages.collisions, &storages.velocity, &storages.position, &storages.animations})

   Game_Systems.engage_system:run({&storages.collisions, &storages.gear_slot})
   Game_Systems.bridge_system:run({&storages.bridge, &storages.collider, &storages.sprite})

   Game_Systems.obstacles_system:run({&storages.obstacles, &storages.collisions, &storages.velocity})
   Game_Systems.velocity_system:run({&storages.velocity, &storages.position})

   Game_Systems.animation:run({&storages.animations, &storages.sprite})

   Globals.camera.target = player_position.position

   if Raylib.IsKeyPressed(KeyboardKey.KEY_T) then
      txt_text = txt_text == TXT_TEXT_EN_US and TXT_TEXT_PT_BR or TXT_TEXT_EN_US
   end

   -- ] Update ]

   -- [ Draw [
   Raylib.BeginDrawing()
      Raylib.ClearBackground(BACKGROUND_COLOR)

      Raylib.BeginMode2D(Globals.camera)
         Raylib.DrawText(txt_text, 32*26, 32*22, 20, RAYWHITE)

         Game_Systems.sprite_painter:run({&storages.sprite, &storages.position})

         ## if SHOW_DEV_INFO then
            Game_Systems.show_colliders:run({&storages.collider})
            Game_Systems.show_collisions:run({&storages.position, &storages.collisions})
            Game_Systems.show_obstacles:run({&storages.position, &storages.obstacles, &storages.collisions})
            Game_Systems.show_positions:run({&storages.position})
         ## end

      Raylib.EndMode2D()
   Raylib.EndDrawing()
   -- ] Draw ]

   ## if PLATFORM_WEB then
      gc:run() -- safe to collect garbage here
   ## end
end

## if PLATFORM_WEB then
   emscripten_set_main_loop(update_draw_frame, 0, 1)
## else
   while not Raylib.WindowShouldClose() do
      update_draw_frame()
   end
##end

-- ] Game loop ]

-- [ Game De-initialization [
resources:unload()
Raylib.CloseWindow()
-- ] Game De-initialization ]
